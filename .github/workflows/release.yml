name: Release

on:
  workflow_dispatch:
    inputs:
      dryRun:
        description: 'Do a dry run to preview instead of a real release'     
        required: true
        default: 'true'
        
jobs:
  authorize: 
    name: Authorize
    runs-on: macos-10.15 
    steps:
      - name: ${{ github.actor }} permission check to do a release
        uses: octokit/request-action@v2.0.0
        with:
          route: GET /repos/${{ github.repository }}/collaborators/${{ github.actor }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release:
    name: Release
    runs-on: macos-10.15 
    needs: [authorize]
    strategy:
      matrix:
        ruby-version: ["2.7.x"]
        node-version: ["12.x"]
    env:
      GIT_AUTHOR_NAME: amplitude-sdk-bot
      GIT_AUTHOR_EMAIL: amplitude-sdk-bot@users.noreply.github.com
      GIT_COMMITTER_NAME: amplitude-sdk-bot
      GIT_COMMITTER_EMAIL: amplitude-sdk-bot@users.noreply.github.com

    steps:
      - name: Checkout
        uses: actions/checkout@v2 

      - name: node_modules cache
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Setup Node.js
        uses: actions/setup-node@v2.1.5
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build
        run: yarn prepare

      - name: Setup Ruby
        uses: actions/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby-version }}

      - name: Cache Bundle Gems and Cocoapods
        id: cache-gems-pods
        uses: actions/cache@v2
        with:
          path: |
            Pods
            vendor/bundle
          key: ${{ runner.os }}-ruby-${{ matrix.ruby-version }}-gems-${{ hashFiles('**/Gemfile.lock') }}-pods-${{ hashFiles('**/Podfile.lock') }}

      - name: Install Cocoapods
        if: steps.cache-gems-pods.outputs.cache-hit != 'true'
        run: |
          gem install bundler

      - name: Release --dry-run  # Uses release.config.js
        if: ${{ github.event.inputs.dryRun == 'true'}}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: yarn release --dry-run

      - name: Release # Uses release.config.js
        if: ${{ github.event.inputs.dryRun == 'false'}}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: yarn release
